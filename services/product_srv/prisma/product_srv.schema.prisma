// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

generator prismaClassGenerator {
  provider = "prisma-class-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  uuid String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  name String

  country String
  district String
  region String
  city String

  legalAddress String
  actualAddress String?

  postalCode Int

  supportPhone String
  supportEmail String

  managerPhone String
  managerEmail String

  orderPhone String
  orderEmail String

  replayToEmail String

  startYear Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  shops Shop[]

  @@index([uuid])
  @@map("company")
}

model Shop {
  uuid String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @unique @db.Text

  address String?

  isActive Boolean @default(true) @db.Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  companyUuid String  @db.Uuid
  company     Company @relation(fields: [companyUuid], references: [uuid])

  @@index([uuid, companyUuid])
  @@map("shop")
}

model Product {
  uuid String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  title       String @db.Text
  description String @db.Text

  brandCode String? @db.Text
  brand     Brand? @relation(fields: [brandCode], references: [code])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  prices             Price[]
  images             ImageOnProduct[]
  categoryOnProduct  CategoryOnProduct[]
  attributeOnProduct AttributeOnProduct[]

  @@index([uuid, brandCode])
  @@map("product")
}

enum PricePhaseEnum {
  NEW
  CHANGE
}

model Price {
  uuid        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  prevPrice   Float?
  price       Float
  description String
  phase       PricePhaseEnum

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  productUuid String  @db.Uuid
  product     Product @relation(fields: [productUuid], references: [uuid])

  currencyCode String @db.Text
  currency     Currency @relation(fields: [currencyCode], references: [code])

  @@map("price")
}

model Category {
  code  String @id @db.Text
  title String @db.Text
  description  String @db.Text

  parentCode String? @db.Text

  children Category[] @relation("CategoryToCategory")
  parent   Category?  @relation("CategoryToCategory", fields: [parentCode], references: [code], onDelete: SetNull)

  features FeatureOnCategory[]
  products CategoryOnProduct[]

  brandOnCategory BrandOnCategory[]

  @@index([parentCode, code])
  @@map("category")
}

model CategoryOnProduct {
  productUuid String  @db.Uuid
  product     Product @relation(fields: [productUuid], references: [uuid])

  categoryCode String   @db.Text
  category     Category @relation(fields: [categoryCode], references: [code])

  @@id([productUuid, categoryCode])
  @@map("category_on_product")
}

model BrandOnCategory {
  brandCode String  @db.Text
  brand     Brand @relation(fields: [brandCode], references: [code])

  categoryCode String   @db.Text
  category     Category @relation(fields: [categoryCode], references: [code])

  @@id([brandCode, categoryCode])
  @@map("brand_on_category")
}

model Unit {
  code  String @id @db.Text
  value String @db.Text
  description String? @db.Text

  features       Feature[]
  attribute      Attribute[]

  @@index([code])
  @@map("unit")
}

model Image {
  uuid  String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title String @db.Text

  products ImageOnProduct[]

  @@map("image")
}

model ImageOnProduct {
  productUuid String  @db.Uuid
  product     Product @relation(fields: [productUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)

  imageUuid String @db.Uuid
  image     Image  @relation(fields: [imageUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)

  order Int @db.Integer

  @@id([productUuid, imageUuid])
  @@map("image_on_product")
}

enum FeatureTypeEnum {
  DEFAULT
  CHECKBOX
  DATE
  NUMBER
  COLOR
}

enum FeatureStatusEnum {
  SHOW
  HIDE
  OFF
}

model Feature {
  uuid String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  title String @db.Text

  code String @db.Text

  description String @db.Text

  type FeatureTypeEnum @default(DEFAULT)

  isShowInProductTab Boolean @default(true) @db.Boolean

  isShowInProductList Boolean @default(false) @db.Boolean

  isShowInProductHeader Boolean @default(false) @db.Boolean

  status FeatureStatusEnum @default(SHOW)

  groupUuid String?       @db.Uuid
  group     FeatureGroup? @relation(fields: [groupUuid], references: [uuid])

  unitCode String? @db.Text
  unit     Unit?   @relation(fields: [unitCode], references: [code])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  categories FeatureOnCategory[]

  @@map("feature")
}

model FeatureGroup {
  uuid String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  title String @db.Text

  description String @db.Text

  order Int @db.Integer

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  feature Feature[]

  @@map("feature_group")
}

model FeatureOnCategory {
  featureUuid String  @db.Uuid
  feature     Feature @relation(fields: [featureUuid], references: [uuid], onDelete: Cascade)

  categoryCode String   @db.Text
  category     Category @relation(fields: [categoryCode], references: [code], onDelete: Cascade)

  @@id([featureUuid, categoryCode])
  @@map("feature_on_category")
}

model Attribute {
  code String @id @db.Text

  name        String @db.Text
  description String? @db.Text

  attributeOnProduct AttributeOnProduct[]

  unitCode           String? @db.Text
  unit               Unit?   @relation(fields: [unitCode], references: [code], onDelete: Cascade)

  @@map("attribute")
}

model AttributeValue {
  uuid String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  value String @db.Text

  attributeOnProduct AttributeOnProduct[]

  @@map("attribute_value")
}

model AttributeOnProduct {
  uuid String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  productUuid String  @db.Uuid
  product     Product @relation(fields: [productUuid], references: [uuid], onDelete: Cascade)

  attributeCode String    @db.Text
  attribute     Attribute @relation(fields: [attributeCode], references: [code], onDelete: Cascade)

  valueUuid String?         @db.Uuid
  value     AttributeValue? @relation(fields: [valueUuid], references: [uuid], onDelete: Cascade)

  @@map("attribute_on_product")
}

model Currency {
  code         String @id @db.Text
  value        String @db.Text
  description  String @db.Text

  price Price[]

  @@map("currency")
}

model Brand {
  code String @id @db.Text
  name String @db.Text
  description String? @db.Text

  product Product[]

  brandOnCategory BrandOnCategory[]

  @@map("brand")
}